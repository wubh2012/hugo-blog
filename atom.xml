<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AALMIX's Blog</title><link>https://wubh2012.github.io/</link><description>Recent content on AALMIX's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 Jul 2022 17:19:16 +0800</lastBuildDate><atom:link href="https://wubh2012.github.io/atom.xml" rel="self" type="application/rss+xml"/><item><title>美化 Windows Terminal</title><link>https://wubh2012.github.io/make-a-beautiful-windows-terminal.html</link><pubDate>Sat, 30 Jul 2022 17:19:16 +0800</pubDate><guid>https://wubh2012.github.io/make-a-beautiful-windows-terminal.html</guid><description>&lt;p>&lt;img src="https://static.aalmix.com/20220730172459.png" alt="20220730172459">&lt;/p>
&lt;h2 id="安装-powershell7">安装 PowerShell7&lt;/h2>
&lt;p>打开这个&lt;a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.2">链接&lt;/a>去下载 PowerShell7 安装包直接运行就完了&lt;/p>
&lt;h2 id="安装-on-my-poshhttpsohmyposhdevdocsinstallationwindows">安装 &lt;a href="https://ohmyposh.dev/docs/installation/windows">on-my-posh&lt;/a>&lt;/h2>
&lt;p>执行下面命令 powershell 将安装 on-my-posh 并且应用 on-my-posh 最新主题&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://ohmyposh.dev/install.ps1&amp;#39;))
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装字体">安装字体&lt;/h2>
&lt;p>去 Nerd Fonts 下载 Caskaydia Cove Nerd Font 字体，然后 &lt;code>Ctrl+Shift+,&lt;/code> 打开 Windows Terminal 设置，配置 powershell 7 的字体&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;colorScheme&amp;#34;: &amp;#34;One Half Dark&amp;#34;,
&amp;#34;guid&amp;#34;: &amp;#34;{574e775e-4f2a-5b96-ac1e-a2962a402336}&amp;#34;,
&amp;#34;hidden&amp;#34;: false,
&amp;#34;name&amp;#34;: &amp;#34;PowerShell&amp;#34;,
&amp;#34;source&amp;#34;: &amp;#34;Windows.Terminal.PowershellCore&amp;#34;,
&amp;#34;font&amp;#34;:
{
&amp;#34;face&amp;#34;: &amp;#34;CaskaydiaCove NF&amp;#34;,
&amp;#34;size&amp;#34;: 12
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="选择主题">选择主题&lt;/h2>
&lt;p>先使用 &lt;code>notepad $PROFILE&lt;/code> 命令打开 PowerShell 的配置文件，然后在配置文件中添加下面的命令&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">oh-my-posh init pwsh --config &amp;#34;$env:POSH_THEMES_PATH\zash.omp.json&amp;#34; | Invoke-Expression
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装文件图标库">安装文件图标库&lt;/h2>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">Install-Module -Name Terminal-Icons -Repository PSGallery
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用图标需要在 $PROFILE 文件中添加下面命令&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">Import-Module -Name Terminal-Icons
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="设置命令行自动补全和提示">设置命令行自动补全和提示&lt;/h2>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="其他设置">其他设置&lt;/h2>
&lt;p>将 Git Bash 添加到 Windows Terminal&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">Git Bash命令行 &amp;#34;C:\Program Files\Git\bin\bash.exe&amp;#34; --login -i
启动目录 %USERPROFILE%
图标 C:\Program Files\Git\mingw64\share\git\git-for-windows.ico
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>完整的 powershell 设置如下：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">oh-my-posh init pwsh | Invoke-Expression
oh-my-posh init pwsh --config &amp;#34;$env:POSH_THEMES_PATH\powerlevel10k_rainbow.omp.json&amp;#34; | Invoke-Expression
Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete
Import-Module -Name Terminal-Icons
Import-Module posh-git
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考连接： &lt;a href="https://docs.microsoft.com/zh-cn/windows/terminal/tutorials/custom-prompt-setup">https://docs.microsoft.com/zh-cn/windows/terminal/tutorials/custom-prompt-setup&lt;/a>&lt;/p></description></item><item><title>使用hugo搭建博客 - 利用 Utterances 搭建博客评论</title><link>https://wubh2012.github.io/hugo-blog-use-utterances.html</link><pubDate>Wed, 25 May 2022 21:51:39 +0800</pubDate><guid>https://wubh2012.github.io/hugo-blog-use-utterances.html</guid><description>&lt;p>&lt;img src="https://static.aalmix.com/20220525220957.png" alt="20220525220957">&lt;/p>
&lt;p>Utterances 来搭建博客评论，这是一个很好的博客评论系统，它可以让我们的博客更加简洁，更加美观，更加友好。&lt;/p>
&lt;h2 id="如何安装">如何安装&lt;/h2>
&lt;p>进入 &lt;a href="https://github.com/apps/utterances">https://github.com/apps/utterances&lt;/a> 页面，点击 Configure 按钮，选择 wubh2012.github.io 仓库来将 Utterances 安装到你的 GitHub 仓库中。
&lt;img src="https://static.aalmix.com/20220525221420.png" alt="20220525221420">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220525221351.png" alt="20220525221351">&lt;/p>
&lt;p>当有用户发表评论时，Utterances 会自动将评论发送到 GitHub 仓库中。
&lt;img src="https://static.aalmix.com/20220525221643.png" alt="20220525221643">&lt;/p></description></item><item><title>使用hugo搭建博客 - 利用 Github Actions 自动部署网站</title><link>https://wubh2012.github.io/hugo-blog-use-git-action-auto-deploy.html</link><pubDate>Wed, 25 May 2022 21:50:44 +0800</pubDate><guid>https://wubh2012.github.io/hugo-blog-use-git-action-auto-deploy.html</guid><description>&lt;p>之前我们每次更新博客都需要重新上传 public 这个目录的文件，步骤比较繁琐，今天给大家分享一下我们可以通过 Github Actions 自动部署的方式来更新博客。&lt;/p>
&lt;h2 id="什么是-github-action">什么是 GitHub Action&lt;/h2>
&lt;p>GitHub Actions 是 GitHub 官方推出的持续集成服务。通过 GitHub Actions 可以为你的项目提供持续构建，测试，程序打包和部署一条龙服务。&lt;/p>
&lt;h2 id="怎么使用">怎么使用&lt;/h2>
&lt;p>进入 wubh2012.github.io 仓库，点击 Actions 选项卡，开始创建一个新的 Actions，按照下面的步骤将操作即可。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220526140607.png" alt="微信截图_20220526140607">
&lt;img src="https://static.aalmix.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220526140646.png" alt="微信截图_20220526140646">&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#ff79c6">name&lt;/span>: github pages
&lt;span style="color:#ff79c6">on&lt;/span>: &lt;span style="color:#6272a4">#&lt;/span>
&lt;span style="color:#ff79c6">schedule&lt;/span>:
- &lt;span style="color:#ff79c6">cron&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;0 0 * * *&amp;#34;&lt;/span> &lt;span style="color:#6272a4"># every day at midnight&lt;/span>
&lt;span style="color:#ff79c6">push&lt;/span>: &lt;span style="color:#6272a4"># when a new commit is pushed&lt;/span>
&lt;span style="color:#ff79c6">branches&lt;/span>:
- master
&lt;span style="color:#ff79c6">jobs&lt;/span>:
&lt;span style="color:#ff79c6">deploy&lt;/span>:
&lt;span style="color:#ff79c6">runs-on&lt;/span>: ubuntu-18.04
&lt;span style="color:#ff79c6">steps&lt;/span>:
- &lt;span style="color:#ff79c6">uses&lt;/span>: actions/checkout@v2
&lt;span style="color:#ff79c6">with&lt;/span>:
&lt;span style="color:#ff79c6">submodules&lt;/span>: &lt;span style="color:#ff79c6">true&lt;/span> &lt;span style="color:#6272a4"># Fetch Hugo themes (true OR recursive)&lt;/span>
&lt;span style="color:#ff79c6">fetch-depth&lt;/span>: &lt;span style="color:#bd93f9">0&lt;/span> &lt;span style="color:#6272a4"># Fetch all history for .GitInfo and .Lastmod&lt;/span>
- &lt;span style="color:#ff79c6">name&lt;/span>: Setup Hugo
&lt;span style="color:#ff79c6">uses&lt;/span>: peaceiris/actions-hugo@v2
&lt;span style="color:#ff79c6">with&lt;/span>:
&lt;span style="color:#ff79c6">hugo-version&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;0.82.0&amp;#34;&lt;/span>
&lt;span style="color:#ff79c6">extended&lt;/span>: &lt;span style="color:#ff79c6">true&lt;/span>
- &lt;span style="color:#ff79c6">name&lt;/span>: Setup Node
&lt;span style="color:#ff79c6">uses&lt;/span>: actions/setup-node@v2
&lt;span style="color:#ff79c6">with&lt;/span>:
&lt;span style="color:#ff79c6">node-version&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;12.x&amp;#34;&lt;/span>
- &lt;span style="color:#ff79c6">name&lt;/span>: Cache dependencies
&lt;span style="color:#ff79c6">uses&lt;/span>: actions/cache@v1
&lt;span style="color:#ff79c6">with&lt;/span>:
&lt;span style="color:#ff79c6">path&lt;/span>: ~/.npm
&lt;span style="color:#ff79c6">key&lt;/span>: ${{ runner.os }}-node-${{ hashFiles(&amp;#39;**/package-lock.json&amp;#39;) }}
&lt;span style="color:#ff79c6">restore-keys&lt;/span>: |&lt;span style="color:#f1fa8c">
&lt;/span>&lt;span style="color:#f1fa8c"> &lt;/span> ${{ runner.os }}-node-
- &lt;span style="color:#ff79c6">run&lt;/span>: npm i
- &lt;span style="color:#ff79c6">run&lt;/span>: hugo --minify &lt;span style="color:#6272a4"># 使用hugo构建静态网页&lt;/span>
- &lt;span style="color:#ff79c6">name&lt;/span>: Deploy
&lt;span style="color:#ff79c6">uses&lt;/span>: peaceiris/actions-gh-pages@v3
&lt;span style="color:#ff79c6">with&lt;/span>:
&lt;span style="color:#ff79c6">github_token&lt;/span>: ${{ secrets.GITHUB_TOKEN }}
&lt;span style="color:#ff79c6">publish_dir&lt;/span>: ./public
&lt;span style="color:#ff79c6">cname&lt;/span>: blog.aalmix.com &lt;span style="color:#6272a4"># 为了实现自定义域名，增加了 cname 配置&lt;/span>
&lt;span style="color:#ff79c6">user_name&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;github-actions[bot]&amp;#34;&lt;/span>
&lt;span style="color:#ff79c6">user_email&lt;/span>: &lt;span style="color:#f1fa8c">&amp;#34;github-actions[bot]@users.noreply.github.com&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>配置好后我们每次推送更新到仓库，都会触发自动构建静态网页，默认放到 &lt;code>gh-pages&lt;/code> 分支，可能需要到设置中修改 Github Page 的源
&lt;img src="https://static.aalmix.com/20220526180758.png" alt="20220526180758">&lt;/p>
&lt;p>而且每天凌晨也会自动部署，这样是不是省事多了 😀 ！&lt;/p></description></item><item><title>使用hugo搭建博客 - 自定义域名</title><link>https://wubh2012.github.io/hugo-blog-custom-domain.html</link><pubDate>Wed, 25 May 2022 21:40:07 +0800</pubDate><guid>https://wubh2012.github.io/hugo-blog-custom-domain.html</guid><description>&lt;p>在上一篇文章当中讲了如何使用 hugo 搭建了我们自己的静态博客并托管到了 github 上，但无法和我们自己的域名进行关联，这个时候我们就需要自定义域名了。&lt;/p>
&lt;p>首先我们需要配置 DNS 解析，以腾讯云为例，在腾讯云的 DNS 解析记录中添加一个 CNAME 记录，主机记录的值为 &lt;code>blog&lt;/code>，记录值为&lt;code>wubh2012.github.io&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220526132439.png" alt="20220526132439">&lt;/p>
&lt;p>然后在 github page 的 Custom domain 填写记录值 &lt;code>blog.aalmix.com&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220525214629.png" alt="20220525214629">&lt;/p>
&lt;p>最后，我们可以使用 &lt;a href="https://blog.aalmix.com">https://blog.aalmix.com&lt;/a> 地址去访问我们的博客了！&lt;/p></description></item><item><title>如何使用 hugo 搭建自己的博客</title><link>https://wubh2012.github.io/use-hugo-build-your-blog.html</link><pubDate>Tue, 12 Apr 2022 14:13:41 +0800</pubDate><guid>https://wubh2012.github.io/use-hugo-build-your-blog.html</guid><description>&lt;p>今天我们来讲讲如何使用 Hugo 搭建自己的博客。&lt;/p>
&lt;h2 id="下载-hugo">下载 Hugo&lt;/h2>
&lt;p>首先我们到 &lt;a href="https://github.com/gohugoio/hugo/releases">Hugo Release&lt;/a> 页面根据自己的操作系统版本下载 Hugo，本文以 Windows 为例，我们下载 Windows x64 版本，然后将文件解压到 &lt;code>D:/software/hugo&lt;/code> 目录下&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220417210225.png" alt="20220417210225">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220417210629.png" alt="20220417210629">&lt;/p>
&lt;p>然后配置一下系统的环境变量，打开电脑的高级系统设置，设置系统变量，在 &lt;code>PATH&lt;/code>变量后面添加 Hugo 的目录 &lt;code>D:/software/hugo&lt;/code>，然后保存，关闭系统设置，然后打开命令行，进入 &lt;code>D:/software/hugo&lt;/code> 目录，执行 &lt;code>hugo version&lt;/code> 命令验证一下即可，如下图所示：&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220417211154.png" alt="20220417211154">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220417211401.png" alt="20220417211401">&lt;/p>
&lt;p>配置好环境变量后我们就可以在任意一个目录下执行 &lt;code>hugo&lt;/code> 命令了。&lt;/p>
&lt;h2 id="创建博客站点">创建博客站点&lt;/h2>
&lt;p>我们可以使用 &lt;code>hugo new site myblog&lt;/code> 创建一个新的博客站点，然后在 &lt;code>myblog&lt;/code> 目录下执行 &lt;code>hugo server&lt;/code> 命令，hugo 默认端口使用的是 1313, 我们在浏览器中输入 &lt;code>http://localhost:1313&lt;/code> 就可以访问了如下图所示：&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20220420211247.png" alt="20220420211247">
由于我们目前还没有写任何文章，所以看到的是一个空白的页面。
&lt;img src="https://static.aalmix.com/20220420211620.png" alt="20220420211620">&lt;/p>
&lt;h3 id="添加主题">添加主题&lt;/h3>
&lt;p>在 myblog 根目录下，运行下面命令，添加主题 &lt;a href="https://github.com/forecho/hugo-theme-echo">hugo-theme-echo&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"> git init # 初始化 git
git submodule add https://github.com/forecho/hugo-theme-echo.git themes/echo
cd themes/echo # 进入 themes/echo 目录
npm ci # 本地开发才需要
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改-hugo-配置">修改 hugo 配置&lt;/h3>
&lt;p>大家可以根据我的 &lt;a href="https://github.com/wubh2012/wubh2012.github.io/blob/master/config.toml">config.toml&lt;/a> 文件进行修改。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">85
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">86
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">87
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">88
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">89
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">90
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">91
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">92
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">93
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">94
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">95
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">baseUrl = &amp;#34;https://wubh2012.githuo.io&amp;#34;
languageCode = &amp;#34;en-us&amp;#34;
title = &amp;#34;AALMIX&amp;#39;s Blog&amp;#34;
theme = &amp;#34;echo&amp;#34;
DefaultContentLanguage = &amp;#34;cn&amp;#34;
# 自动检测是否包含中文/日文/韩文，该参数会影响摘要和字数统计功能，建议设置为 true
hasCJKLanguage = true
# 设置页面生成形式，将默认的网站路径/修改成.html
uglyURLs = true
googleAnalytics = &amp;#34;&amp;#34; # UA-XXXXXXXX-X
enableRobotsTXT = true
## 评论系统
changyanAppid = &amp;#34;&amp;#34; # Changyan app id # 畅言
changyanAppkey = &amp;#34;&amp;#34; # Changyan app key
livereUID = &amp;#34;&amp;#34; # LiveRe UID # 来必力
[markup.highlight]
codeFences = true # 高亮 markdown 的代码块
guessSyntax = true # 高亮 markdown 中没有标注语言的代码块
hl_Lines = &amp;#34;&amp;#34;
lineNoStart = 1
lineNos = true
lineNumbersInTable = true
noClasses = true
style = &amp;#34;dracula&amp;#34;
tabWidth = 2
# https://gohugo.io/content-management/urls/#aliases
[permalinks]
posts = &amp;#34;/:filename&amp;#34;
[outputFormats.RSS]
mediatype = &amp;#34;application/rss&amp;#34;
baseName = &amp;#34;atom&amp;#34;
[services.rss]
limit = 20
[author]
name = &amp;#34;AALMIX&amp;#34;
avatar = &amp;#34;https://avatars.githubusercontent.com/u/22315624?s=400&amp;amp;u=0f4091c87fa6cb1f7ed21d691a5e0bc3eb0b0814&amp;amp;v=4&amp;#34;
bio = &amp;#34; 一名普通的程序员 😀&amp;#34;
homepage = &amp;#34;https://aalmix.com/&amp;#34;
[params]
favicon = &amp;#34;https://avatars.githubusercontent.com/u/22315624?s=460&amp;amp;v=4&amp;#34;
keywords = &amp;#34;AALMIX, 水果芋头,web develoment&amp;#34;
description = &amp;#34;AALMIX, aalmix blog, aalmix 独立博客，水果芋头&amp;#34;
toc = true
navItems = [
[&amp;#34;HOME&amp;#34;, &amp;#34;/&amp;#34;],
[&amp;#34;ARCHIVE&amp;#34;, &amp;#34;/posts.html&amp;#34;],
[&amp;#34;ABOUT&amp;#34;, &amp;#34;/about.html&amp;#34;],
[&amp;#34;RSS&amp;#34;, &amp;#34;/atom.xml&amp;#34;]
]
# rss 全文输出
rssFullContent = true
uglyURLs = true
busuanzi = true # 是否使用不蒜子统计站点访问量
staticCDNPrefix = &amp;#34;https://cdn.bootcss.com/font-awesome/5.11.2&amp;#34;
extraHead = &amp;#39;&amp;lt;script async src=&amp;#34;https://www.googletagmanager.com/gtag/js?id=UA-xxx&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;
postAds = &amp;#34;&amp;#34;
#profileAds = &amp;#39;&amp;lt;div class=&amp;#34;bg-white shadow&amp;#34;&amp;gt;&amp;lt;img class=&amp;#34; object-cover w-auto mx-auto mt-6&amp;#34; src=&amp;#34;https://blog-1251237404.cos.ap-guangzhou.myqcloud.com/20190424153337.png&amp;#34; alt=&amp;#34;微信打赏&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;
notFoundAds = &amp;#39;&amp;#39;
# 开启版权声明，协议名字和链接都可以换
[params.cc]
name = &amp;#34;署名 - 非商业性使用 4.0 国际 (CC BY-NC 4.0)&amp;#34;
link = &amp;#34;https://creativecommons.org/licenses/by-nc/4.0/deed.zh&amp;#34;
# 文章打赏
[params.reward]
enable = false
title = &amp;#34;打赏&amp;#34;
wechat = &amp;#34;&amp;#34; # 微信二维码
alipay = &amp;#34;&amp;#34; # 支付宝二维码
############## 评论系统 start ##############
[params.utterances] # https://utteranc.es/
enable = true
owner = &amp;#34;wubh2012&amp;#34; # Your GitHub ID
repo = &amp;#34;wubh2012.github.io&amp;#34; # The repo to store comments
theme = &amp;#34;github-light&amp;#34;
issueterm = &amp;#34;pathname&amp;#34;
############ 评论系统 end ##############
## 社交链接
[social]
github = &amp;#34;wubh2012&amp;#34;
twitter = &amp;#34;twbh_wubh&amp;#34;
cnblogs = &amp;#34;wubh&amp;#34;
rss = &amp;#34;/atom.xml&amp;#34;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们再运行 &lt;code>hugo server -D&lt;/code> 命令，在浏览器中输入 &lt;code>http://localhost:1313&lt;/code> 就可以看到我们的新博客了。
补上带图片的。&lt;/p>
&lt;h2 id="写下你的第一篇文章">写下你的第一篇文章&lt;/h2>
&lt;p>使用命令 &lt;code>hugo new posts/hello-world.md&lt;/code>, 会在 &lt;code>content/posts/&lt;/code> 目录下创建一个 hello-world.md 文件，Hugo 允许你使用 yaml，toml 或者 json 语法在你每一篇文章的开头进行设置。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">---
# 常用定义
title: &amp;#34;An Example Post&amp;#34; # 标题
date: 2022-04-12T16:01:23+08:00 # 创建时间
lastmod: 2022-04-12T16:01:23+08:00 # 最后修改时间
draft: false # 是否是草稿？
tags: [&amp;#34;tag-1&amp;#34;, &amp;#34;tag-2&amp;#34;, &amp;#34;tag-3&amp;#34;, &amp;#34;popular&amp;#34;] # 标签
categories: [&amp;#34;index&amp;#34;] # 分类
author: &amp;#34;wubh2012&amp;#34; # 作者
# 用户自定义
# 你可以选择 关闭 (false) 或者 打开 (true) 以下选项
comment: false # 关闭评论
toc: false # 关闭文章目录
reward: false # 关闭打赏
---
## Hello World!
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们再次运行 &lt;code>hugo serve -D&lt;/code> 命令，在浏览器中输入 &lt;code>http://localhost:1313/hello-world.html&lt;/code> 就可以看到我们的新文章了。&lt;/p>
&lt;h2 id="发布到-github">发布到 GitHub&lt;/h2>
&lt;ol>
&lt;li>在 Github 创建一个与你账号同名的仓库，以 wubh2012.github.io 为例子&lt;/li>
&lt;li>在仓库中设置启用 GitPage
&lt;img src="https://static.aalmix.com/20220525212029.png" alt="20220525212029">&lt;/li>
&lt;li>首先使用 &lt;code>hugo -D&lt;/code> 构建静态站点，默认会在 &lt;code>public/&lt;/code> 目录下生成静态文件，将 public 文件夹的内容上传到仓库中
&lt;img src="https://static.aalmix.com/20220525212122.png" alt="20220525212122">&lt;/li>
&lt;li>访问 &lt;a href="https://wubh2012.github.io">https://wubh2012.github.io&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://static.aalmix.com/20220525212203.png" alt="20220525212203">&lt;/p>
&lt;p>大工告成，恭喜你现在有一个自己的博客了！如果博客有更新只要重新上传 public 文件夹即可, 后面会教大家如何使用 GitAction 自动更新部署。&lt;/p></description></item><item><title>Docker 指南</title><link>https://wubh2012.github.io/docker-guide.html</link><pubDate>Sat, 09 Apr 2022 10:37:09 +0800</pubDate><guid>https://wubh2012.github.io/docker-guide.html</guid><description>&lt;h1 id="docker-指南">Docker 指南&lt;/h1>
&lt;p>本文的目的是解释与 Docker 相关的重要概念，以便能够有效的使用 Docker 开发应用程序。&lt;/p>
&lt;h2 id="什么是-docker">什么是 Docker?&lt;/h2>
&lt;p>Docker 是一个能够在独立的环境中运行应用程序的的工具。&lt;/p>
&lt;p>它可以确保应用程序能在独立的环境下运行，应用程序能够按预期的那样在不同的机器/服务器上运行。这样可以确保在本地开发应用程序，部署到服务器环境上也可以运行。对于开发人员来说，Docker 能够在任何计算机上按照预期快速的启动和运行程序，与其他开发人员协作时也不需要关心他们的电脑配置如何。&lt;/p>
&lt;p>在不同的电脑上运行应用程序之所以这么困难，是因为必须先正确的安装应用程序所依赖的软件版本。例如，假如在一台安装了Node.js 12.8 版本的电脑上可以正常运行一个由 Node.js 构建的API项目，换到一台安装了 Node.js 10.18 版本的电脑上可能不一定就能运行起来，因为使用的API可能不一样。其他的应用程序可能也会有同样的问题，比如 python, ruby, php, typescript, mysql 等等。Docker 的出现使得构建容器化的应用程序成为了可能，这些应用程序都自带了依赖项的正确版本，可以在不同电脑上运行。&lt;/p>
&lt;p>Docker 有4种类型的“对象”来创建这些隔离的环境：images(镜像), containers(容器)，volumes(存储卷) 和 network(网络)。我们使用最多的还是 Docker images 和 Docker containers。&lt;/p>
&lt;p>Docker images(镜像)理解为一个包含了操作系统和应用的对象，Docker containers(容器)是用来运行Docker镜像中代码的环境。Docker 镜像可以保存到Docker仓库中心，供其他人下载使用。目前最流行的Docker 仓库是 Docker Hub。&lt;/p>
&lt;p>Docker volumes(存储卷) 用于保存容器所产生的数据，将数据保存到 Docker 存储卷中后，即使 Docker 容器被删除、重新创建、重新启动，数据也不会丢失。Docker volumen支持2个容器共享访问相同的数据，只需要将容器的的存储卷指向相同的位置就可以。&lt;/p>
&lt;p>Docker network(网络) 可以用来隔离容器，可以允许容器之间彼此通信。&lt;/p>
&lt;h2 id="那么虚拟机呢-virtual-machines">那么虚拟机呢 virtual machines？&lt;/h2>
&lt;p>经常出现虚拟机(vm)与 Docker 相关的话题，因为它们都用来创建隔离的环境。
使用 Docker后，应用程序将在容器的独立环境下运行，这些容器中的每一个都共享同一个电脑上的操作系统内核。另一方面，在虚拟机上运行的应用程序运行在自己的操作系统上，不共享底层内核，虚拟机在 hypervisor 帮助下运行和管理要运行的操作系统。&lt;/p>
&lt;p>虚拟机配图&lt;/p>
&lt;p>使用Docker相对于虚拟机来说有压倒性的优势，Docker容器可以在几秒钟到几分钟运行起来，而且是轻量级的（MB 相对于GB的大小），容易配置，并且只使用少量的资源。也许使用虚拟机而不是Docker的唯一原因是，由于担心 Docker 容器在主机操作系统上使用共享内核会产生安全漏洞，因此需要更高级别的隔离。&lt;/p>
&lt;p>配图说明Docker和VM的优缺点&lt;/p>
&lt;p>使用图片说明 Docker 镜像对于虚拟机来说有多小&lt;/p>
&lt;h2 id="docker-engine">Docker engine&lt;/h2>
&lt;h2 id="安装-docker">安装 Docker&lt;/h2>
&lt;p>目前安装 Docker 相关依赖的最简单的方法是安装 Docker Desktop. Docker Desktop 附带了几个与 Docker 相关的工具，包括 Docker Engine、Docker CLI 和 Docker Compose。
对于 Mac 和 Windows 用户可以通过下面的链接进行下载安装&lt;/p>
&lt;ul>
&lt;li>Mac &lt;a href="https://docs.docker.com/docker-for-mac/install/">https://docs.docker.com/docker-for-mac/install/&lt;/a>&lt;/li>
&lt;li>Windows &lt;a href="https://docs.docker.com/docker-for-windows/install/">https://docs.docker.com/docker-for-windows/install/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>安装以后，请确保 Docker Desktop 正在运行。如果 Docker Desktop 正在运行，则意味着 Docker Engine 已启动，并且本文提到的 Docker CLI 命令也能执行。&lt;/p>
&lt;p>配图！&lt;/p>
&lt;p>对于 Linux 用户来说并没有 Docker Desktop软件，所以每个组件必须单独安装&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.docker.com/engine/install/">Docker Engine + CLI &lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docs.docker.com/compose/install/">Docker Compose&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在 Linux 系统当中，需要通过下面的命令启动 Docker 的守护进程&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-sh" data-lang="sh">sudo systemctl start docker
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令应该可以正常运行，因为 &lt;code>systemctl&lt;/code> 已经在大多数 Linux 发行版中集成了，如果无法运行那么请使用 &lt;code>sudo service docker start&lt;/code> 命令。这是另一种可以在 Linux 开机时自动启动 Docker。&lt;/p>
&lt;h2 id="dockerfile">Dockerfile&lt;/h2>
&lt;p>&lt;code>DockerFile&lt;/code> 是一个如何构建镜像的说明文件。这个文件通常首先会指定一个基础的Docker镜像，例如，如何需要构建一个机遇 python 的API ，那么就可以使用一个安装了 python 环境的Linux操作系统作为Docker基础镜像，指定这个基础镜像之后使用其他指令来构建Docker镜像。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># 使用安装了Node12.16.1版本的Linux操作系统作为基础镜像
FROM node:12.16.1-alpine3.11
# Installs some dependencies required for the Node.js API
# 安装 Node.js 依赖
RUN apk add --no-cache make g++
# Indicates that the API exposes port 3000
# 对外暴露 3000 端口
EXPOSE 3000
# Specifies the working directory. All the paths referenced after this point will be relative to this directory.
# 指定工作目录
WORKDIR /usr/src/app
# Copy all local source files into the Docker container&amp;#39;s working directory
# 将本地文件复制到镜像的工作目录当中
COPY . .
# Installs NPM dependencies using yarn
# 使用 yarn 安装项目依赖
RUN yarn install
# Command to start the API which will get executed when a Docker container using this image is started.
# 当容器运行的时候将会执行 yarn start 命令
CMD [ &amp;#34;yarn&amp;#34;, &amp;#34;start&amp;#34; ]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面列出了常用的指令说明，完整的列表请查看 &lt;a href="https://docs.docker.com/engine/reference/builder/">Docker 官方文档&lt;/a>&lt;/p>
&lt;p>如果有一些文件不需要复制到 Docker 镜像当中，那么可是在 Dockerfile 同级目录下面添加一个 &lt;code>.dockerignore&lt;/code>文件，这样使用 &lt;code>COPY&lt;/code>或 &lt;code>ADD&lt;/code>指令的时候将不会把&lt;code>.dockerignore&lt;/code>中指定文件复制到Docker镜像当中。更多关于&lt;code>.dockerignore&lt;/code> 语法问题请参考这个&lt;a href="https://docs.docker.com/engine/reference/builder/#dockerignore-file">链接&lt;/a>。&lt;/p>
&lt;h2 id="docker-image">Docker image&lt;/h2>
&lt;p>镜像由多个层组成，每层叠加之后，从外部看就如同一个独立的对象。镜像内部是一个精简的操作系统，同时还包含应用运行所必须的文件和依赖包。因为容器的设计初衷就是快速和小巧，所以镜像通常比较小。&lt;/p>
&lt;h3 id="构建镜像和给镜像打标签">构建镜像和给镜像打标签&lt;/h3>
&lt;p>使用 &lt;code>docker build &lt;/code>命令来创建镜像，当构建镜像时会提供一个 &lt;code>--tag&lt;/code>选项给镜像打标签，这样就知道从镜像仓库中使用哪个镜像，或者在运行容器时使用哪个镜像了。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker build --tag my-app:1.0 .
# --tag 可以简写成 -t
docker build -t my-app:1.0 .
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://static.aalmix.com/image-20210516164412510.png" alt="image-20210516164412510">&lt;/p>
&lt;p>分解上面的命令&lt;/p>
&lt;ul>
&lt;li>&lt;code>docker build&lt;/code> 指定正在创建Docker镜像&lt;/li>
&lt;li>&lt;code>--tag my-app:1.0&lt;/code> 指定给镜像命名为 my-app 并且标记为1.0 版本&lt;/li>
&lt;li>&lt;code>.&lt;/code> 最后一个点表示 Docker 镜像是由当前目录的Dockerfile 构建的。&lt;/li>
&lt;/ul>
&lt;p>使用 &lt;code>docker images&lt;/code> 命令可以查看所有的本地的镜像，这样就可以验证镜像刚刚已经创建成功&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker images
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://static.aalmix.com/image-20210516164445416.png" alt="image-20210516164445416">&lt;/p>
&lt;p>如果构建镜像时只有 &lt;code>--tag&lt;/code>并没有指定版本的话，那么默认使用的版本就是 &lt;code>latest&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker build --tag my-app .
docker images
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://static.aalmix.com/image-20210516164919632.png" alt="image-20210516164919632">&lt;/p>
&lt;p>除了使用 &lt;code>docker build --tag &lt;/code> 命令给镜像打标签之外，还可以使用 &lt;code>docker tag&lt;/code>命令。因为同一个镜像可以有多个标签，使用&lt;code>docker tag &lt;/code>可以给通过&lt;code>docker build --tag&lt;/code>构建的镜像打上新的标签。
&lt;img src="https://static.aalmix.com/image-20210516170500356.png" alt="image-20210516170500356">&lt;/p>
&lt;p>注意：现在my-app有多个镜像版本，它们的 Image ID 都相同但 Repository Name 却不同，但实际上它们都同一个镜像，Repository Name 与使用 &lt;code>docker push&lt;/code>将镜像推送到Docker镜像仓库的名称有关，在此处不详细展开讲。&lt;/p>
&lt;blockquote>
&lt;p>注意镜像的标签是可变的&lt;/p>
&lt;p>假设镜像golftrack:1.5存在一个已知的Bug。因此可以拉取该镜像后修复它，并使用相同的标签将更新的镜像重新推送回仓库。一起来思考下刚才发生了什么。镜像golftrack:1.5存在Bug，这个镜像已经应用于生产环境。如果创建一个新版本的镜像，并修复了这个Bug。那么问题来了，构建新镜像并将其推送回仓库时使用了与问题镜像相同的标签！原镜像被覆盖，但在生产环境中遗留了大量运行中的容器，没有什么好办法区分正在使用的镜像版本是修复前还是修复后的，因为两个镜像的标签是相同的！&lt;/p>
&lt;p>这个时候就不要通过镜像的摘要进行获取镜像了&lt;/p>
&lt;p>docker image pull nginx@sha256:c3dcdb92d7432d56604d&amp;hellip;.&lt;/p>
&lt;/blockquote>
&lt;h3 id="列出镜像">列出镜像&lt;/h3>
&lt;p>使用&lt;code>docker images&lt;/code> 或 &lt;code>docker images ls&lt;/code> 命令可以列出当前本地可用的Docker 镜像&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker images
docker images ls
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="拉取和推送镜像">拉取和推送镜像&lt;/h3>
&lt;p>Docker 镜像可以保存在Docker镜像注册中心，默认的中心是 Docker Hub 。从Docker Hub拉取镜像使用&lt;code>docker pull&lt;/code>命令：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker pull nginx:1.18.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令将从Docker Hub 拉取官方的 1.18.0 版本的 nginx 镜像。
&lt;img src="https://static.aalmix.com/image-20210516172205211.png" alt="image-20210516172205211">&lt;/p>
&lt;p>如果不指定nginx 的版本，默认会拉取标记为&lt;code>latest&lt;/code>最新的版本。&lt;/p>
&lt;p>上面使用nginx 镜像都是来自Docker Hub的官方镜像，官方的镜像一般都是经过Docker Hub正式批准的镜像，并且这些镜像会定期进行安全漏洞测试。&lt;/p>
&lt;p>任何人都可以在Docker Hub上创建自己的账号和仓库，并箱仓库中推送镜像。把镜像推送到Docker Hub意味着镜像被保存在Docker Hub 中。docker push 命令的形式类似下面的命令&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker push &amp;lt;hub-user&amp;gt;/&amp;lt;repo-name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="删除镜像">删除镜像&lt;/h3>
&lt;p>使用 &lt;code>docker rmi&lt;/code> 或 &lt;code>docker image rm&lt;/code> 命令可以删除镜像&lt;/p>
&lt;p>如果镜像已经被容器使用，那么需要先删除容器然后再删除镜像，或者使用&lt;code>docker rmi &lt;/code>命令加上&lt;code>--focus&lt;/code> 选项&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker rmi --focus my-app:1.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里有两个命令，可以一次性清除所有镜像&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker rmi $(docker images -a -q) # remove all images
docker rmi $(docker images -a -q) -f # same as above, but forces the images associated with running containers to also be removed
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="保存和加载镜像">保存和加载镜像&lt;/h3>
&lt;p>在某些情况下，需要将镜像保存到一个文件中，然后重新加载到Docker主机当中。使用&lt;code>docker save&lt;/code>命令保存镜像&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker save --output my-app.tar my-app:1.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面命令是将1.0版本的my-app 镜像保存成 tar 文件，然后我们可以使用&lt;code>docker load&lt;/code>命令将新保存的 tar 文件加载到Docker 主机当中&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker load --input my-app.tar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="docker-container">Docker container&lt;/h2>
&lt;p>容器是镜像的运行时实例。&lt;/p>
&lt;h3 id="运行容器">运行容器&lt;/h3>
&lt;p>通过 &lt;code>docker run &lt;/code> 命令启动容器&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker run my-app:1.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的命令将会使用 my-app 1.0 的镜像创建容器，执行 &lt;code>docker run &lt;/code>命令后将会启动容器，还会执行在 Dockerfile 中指定的 CMD 命令。使用 &lt;code>docker ps &lt;/code>命令可以列出当前所有正在运行的容器。&lt;/p>
&lt;p>容器创建成功会Docker会随机生成一个 ContainerID 和 Container Name给容器，我们也可以通过添加 &lt;code>--name &lt;/code>参数给容器取个好记的名字&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker run --name my-app my-app:1.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通过上面的命令将运行一个叫&lt;code>my-app&lt;/code>名字的容器&lt;/p>
&lt;h3 id="查看容器日志">查看容器日志&lt;/h3>
&lt;p>默认情况下使用&lt;code>docker run&lt;/code> 命令运行容器时会将容器中进程的执行日志实时的输出到当前启动的控制台，然而我们可以通过使用 &lt;code>-d&lt;/code> 参数在分离模式下运行容器，这样就可以继续在控制台中执行命令&lt;/p>
&lt;p>[配图说明区别]&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">docker run -d my-app:1.0
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果使用分离模式运行容器，那么我们可以使用&lt;code>docker logs&lt;/code>命令查下容器的日志&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#6272a4"># 通过容器ID查看&lt;/span>
docker logs 容器ID
&lt;span style="color:#6272a4"># 通过容器名称查看&lt;/span>
docker logs my-app
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="暴露端口">暴露端口&lt;/h3>
&lt;p>Dockerfile 和 save 打包镜像的区别&lt;/p>
&lt;p>Dockerfile 可以查看详细的历史，&lt;/p>
&lt;p>save 的方式就无法查看打包的历史了，不知道给镜像做了什么事情&lt;/p></description></item><item><title>让 nginx 支持多域名站点</title><link>https://wubh2012.github.io/nginx-support-many-domain.html</link><pubDate>Wed, 19 May 2021 18:45:30 +0000</pubDate><guid>https://wubh2012.github.io/nginx-support-many-domain.html</guid><description>&lt;h4 id="需求">需求&lt;/h4>
&lt;p>现在有2个域名，网站部署都同一个公网IP服务器上面，其中站点A已经占用了公网IP的 80 端口，现在想实现两个域名都能通过80端口访问，域名B 访问时不需要添加端口号&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">www.siteA.com =&amp;gt; 111.111.111.111:80
www.siteB.com =&amp;gt; 111.111.111.111:9091
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="之前的做法">之前的做法&lt;/h4>
&lt;p>域名A的解析保持不变，域名B 在DNS解析中添加一个隐性URL记录。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210519194401.png" alt="image-20210519193856059">&lt;/p>
&lt;p>当我们访问域名B的时候，浏览器返回的一串下图所示的HTML代码，本质上还是嵌套一个 frame 。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210519194405.png" alt="image-20210519192104079">&lt;/p>
&lt;p>但是这样无法正常显示域名B的标题，本来想通过 JS 代码去修改，奈何由于浏览器跨域的安全性问题导致无法修改，只要作罢。&lt;/p>
&lt;h4 id="解决方法">解决方法&lt;/h4>
&lt;p>后来还是通过 nginx 解决，在 nginx.conf 中配置两个 server，同时监听 80 端口，当使用浏览器访问不同的域名时，通过 nginx 代理转发到实际程序的端口上。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">
#user nobody;
worker_processes 1;
#error_log logs/error.log;
#error_log logs/error.log notice;
#error_log logs/error.log info;
#pid logs/nginx.pid;
events {
worker_connections 1024;
}
http {
client_max_body_size 100M;
include mime.types;
default_type application/octet-stream;
#log_format main &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#34;$request&amp;#34; &amp;#39;
# &amp;#39;$status $body_bytes_sent &amp;#34;$http_referer&amp;#34; &amp;#39;
# &amp;#39;&amp;#34;$http_user_agent&amp;#34; &amp;#34;$http_x_forwarded_for&amp;#34;&amp;#39;;
#access_log logs/access.log main;
sendfile on;
#tcp_nopush on;
#keepalive_timeout 0;
keepalive_timeout 65;
#gzip on;
server {
listen 80;
server_name www.siteA.com; # 站点A
charset UTF-8;
location / {
proxy_pass http://localhost:9090;
}
}
server {
listen 80;
server_name www.siteB.com; # 站点B
charset UTF-8;
location / {
proxy_pass http://localhost:9091;
}
error_page 404 /404.html;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>nginx_413_request_entity_too_large</title><link>https://wubh2012.github.io/nginx-413-request-entity-too-large.html</link><pubDate>Wed, 19 May 2021 13:40:07 +0000</pubDate><guid>https://wubh2012.github.io/nginx-413-request-entity-too-large.html</guid><description>&lt;p>最近客户反映新闻内容上传图片有的时候会出现失败的情况，一开始判断是图片太大导致超时出现的问题，仔细查看发现上传文件的请求出现了 &lt;code>413 request entity too large&lt;/code> 的错误，而且这个错误是 nginx 返回的。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210519145507.png" alt="image-20210519134645333">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210519145510.png" alt="微信截图_20210519112536">&lt;/p>
&lt;p>查找资料发现 nginx 默认请求的大小只有 1M，后来在 nginx.conf 配置文件中改成 100M 就解决了这个问题。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># nginx.conf
http {
client_max_body_size 100M;
...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考：http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size&lt;/p></description></item><item><title>在windows服务器上将nginx安装成服务</title><link>https://wubh2012.github.io/nginx-run-as-windows-service.html</link><pubDate>Wed, 19 May 2021 12:46:06 +0000</pubDate><guid>https://wubh2012.github.io/nginx-run-as-windows-service.html</guid><description>&lt;p>在 windows 服务器上将 nginx 注册成服务需要借助第三方软件 &lt;code>Windows Service Wrapper&lt;/code>，简称 winsw，下面介绍如何使用&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先去下载 winsw 软件，&lt;a href="https://github.com/winsw/winsw/releases">下载地址&lt;/a>, 我下载的是 &lt;code>WinSW.NET4.exe&lt;/code> ,因为我的服务器上安装了 .NET Framework 4.0，当然你也可以选择下载其他的版本，然后把下载后的文件放在和 nginx.exe 相同目录当中。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210519133028.png" alt="image-20210519130237719">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 &lt;code>WinSW.NET4.exe&lt;/code> 文件重命名为 &lt;code>nginx-service.exe&lt;/code>，这样方便在任务管理器中查找进程。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210519133034.png" alt="image-20210519132458822">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建 &lt;code>nginx-service.xml&lt;/code> 文件，将下面的内容复制进去（你可能需要改下nginx的路径）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-xml" data-lang="xml">&lt;span style="color:#ff79c6">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;service&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;id&amp;gt;&lt;/span>nginx&lt;span style="color:#ff79c6">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;name&amp;gt;&lt;/span>Nginx Service&lt;span style="color:#ff79c6">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;description&amp;gt;&lt;/span>High Performance Nginx Service&lt;span style="color:#ff79c6">&amp;lt;/description&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;executable&amp;gt;&lt;/span>D:\soft\nginx-1.20.0\nginx.exe&lt;span style="color:#ff79c6">&amp;lt;/executable&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;logpath&amp;gt;&lt;/span>D:\soft\nginx-1.20.0\&lt;span style="color:#ff79c6">&amp;lt;/logpath&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;logmode&amp;gt;&lt;/span>roll&lt;span style="color:#ff79c6">&amp;lt;/logmode&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;depend&amp;gt;&amp;lt;/depend&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;stopargument&amp;gt;&lt;/span>-s&lt;span style="color:#ff79c6">&amp;lt;/stopargument&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;stopargument&amp;gt;&lt;/span>stop&lt;span style="color:#ff79c6">&amp;lt;/stopargument&amp;gt;&lt;/span>
&lt;span style="color:#ff79c6">&amp;lt;/service&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>注意：&lt;strong>停止的参数需要分开写成2行，要不然停止 nginx 服务会不成功&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ol start="4">
&lt;li>在命令行中运行 &lt;code>nginx-service.exe install&lt;/code> 安装服务，安装成功后，你可以在服务中查看到&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://static.aalmix.com/20210519133037.png" alt="微信截图_20210519130929">&lt;/p>
&lt;p>后面你可以通过下面的命令管理 nginx 服务&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-bash" data-lang="bash">net start nginx &lt;span style="color:#6272a4"># 启动服务&lt;/span>
net stop nginx &lt;span style="color:#6272a4"># 停止服务&lt;/span>
nginx-service.exe start &lt;span style="color:#6272a4"># 查看服务状态&lt;/span>
nginx-service.exe status &lt;span style="color:#6272a4"># 查看服务状态&lt;/span>
nginx-service.exe stop &lt;span style="color:#6272a4"># 停止服务&lt;/span>
nginx-service.exe restart &lt;span style="color:#6272a4"># 重启服务&lt;/span>
nginx-service.exe uninstall &lt;span style="color:#6272a4"># 卸载服务&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>frp使用systemd在linux系统下实现开机自动运行</title><link>https://wubh2012.github.io/frp%E4%BD%BF%E7%94%A8systemd%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C.html</link><pubDate>Sun, 20 Dec 2020 15:51:29 +0000</pubDate><guid>https://wubh2012.github.io/frp%E4%BD%BF%E7%94%A8systemd%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C.html</guid><description>&lt;p>Systemd 是 Linux 系统系统工具，用来启动守护进程，已经成为了大多数发行版本的标准配置。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># 查看 Systemd 版本
systemctl --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>frp 也是支持 Systemd 的，我们下载的frp文件当中就包含了一个 systemd 文件夹，里面就包含了 frps 和 frpc 的服务配置文件&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201220165016.png" alt="image-20201220160339843">&lt;/p>
&lt;p>我们使用 cat 命令查看一下配置文件内容 &lt;code>cat frps.service&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[Unit]
Description=Frp Server Service
After=network.target
[Service]
Type=simple
User=nobody
Restart=on-failure
RestartSec=5s
ExecStart=/usr/bin/frps -c /etc/frp/frps.ini
[Install]
WantedBy=multi-user.target
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以看到 frps 的执行路径是 &lt;code>/usr/bin/frps&lt;/code>，配置文件放在 &lt;code>/ect/frp/frps.ini&lt;/code>，&lt;/p>
&lt;p>Systemd 的配置文件都放在 &lt;code>/lib/systemd/system&lt;/code> 目录下，系统开机启动的时候之后只执行这个目录里的配置文件，所以我们只要把 &lt;code>frps.service&lt;/code>复制到 &lt;code>/lib/systemd/system&lt;/code> ，frps 复制到 &lt;code>/usr/bin&lt;/code>目录，fprs.ini 复制到&lt;code>/etc/frp&lt;/code>目录就可以了&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">sudo cp frps /usr/bin/frps
sudo mkdir /etc/frp
sudo cp frps.ini /etc/frp/frps.ini
sudo cp systemd/frps.service /lib/systemd/system/frps.service
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># 重新加载 system 配置文件
sudo systemctl daemon-reload
# 设置 frps 开机启动
sudo systemctl enable frps.service
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://static.aalmix.com/20201220165207.png" alt="image-20201220164646349">&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># 启动 frps 服务
sudo systemctl start frps.service
# 查看服务器状态
sudo systemctl status frps.service
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://static.aalmix.com/20201220165202.png" alt="image-20201220164606524">&lt;/p>
&lt;p>参考链接&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html">Systemd 入门教程：命令篇&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html">Systemd 入门教程：实战篇&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>JavaScript 函数作用域的解释</title><link>https://wubh2012.github.io/javascript-%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%A3%E9%87%8A.html</link><pubDate>Sun, 20 Dec 2020 15:51:29 +0000</pubDate><guid>https://wubh2012.github.io/javascript-%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A7%A3%E9%87%8A.html</guid><description>&lt;h1 id="javascript-函数作用域的解释">JavaScript 函数作用域的解释&lt;/h1>
&lt;p>本文将解释作用域的相关概念，我们将学习并理解作用域链的重要性。&lt;/p>
&lt;h2 id="测验时间">测验时间&lt;/h2>
&lt;p>下面的代码执行后将会打印出什么？为什么？&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> jerry() {
console.log(name);
}
&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> tom() {
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;tom&amp;#39;&lt;/span>;
jerry();
}
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;cartoon&amp;#39;&lt;/span>;
tom();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>是打印出 &lt;code>cartoon&lt;/code>, &lt;code>tom&lt;/code> 还是 &lt;code>undefined&lt;/code> 吗? 更重要的是，你是怎么判断然后得到答案的？你用到了作用域了，执行上下文了吗？&lt;/p>
&lt;h2 id="作用域-scope">作用域 Scope&lt;/h2>
&lt;p>上面题目的答案是，&lt;code>cartoon&lt;/code>。 让我们进一步探索和理解它吧&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>In JavaScript, Scope is the mechanism to determine the accessibility of variables throughout their existence. It could be inside or outside of a function call.&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>首先让我们将上面的代码拆分成几部分，然后看看变量的可访问性是如何随着变量声明的位置和函数的位置的变化而变化的。&lt;/p>
&lt;h2 id="回顾一下">回顾一下&lt;/h2>
&lt;p>以下是我们对 JavaScript 执行上下文理解的一些要点：&lt;/p>
&lt;ul>
&lt;li>有一个叫做全局执行上下文（&lt;code>Global Execution Context&lt;/code>）和函数执行上下文(&lt;code>Function Execution Context&lt;/code>)的东西&lt;/li>
&lt;li>每一个执行上下文都有一个特殊的　&lt;code>this&lt;/code> 和 外部环境引用 &lt;code>reference to the Outer Environment&lt;/code>&lt;/li>
&lt;li>当我们调用函数时，JavaScript 引擎会创建当前函数的执行上下文和一个外部引用&lt;/li>
&lt;li>函数可以访问外部引用中定义的变量。当 JavaScript 引擎无法在当前执行上下文中找到变量的时候，它就会去外部引用中去查找。&lt;/li>
&lt;/ul>
&lt;h2 id="作用域和作用域链">作用域和作用域链&lt;/h2>
&lt;p>在上面的代码中，有2个函数调用，tom() 和 jerry() ，因此会创建2个不同的函数执行上下文。&lt;/p>
&lt;p>请记住，JS代码执行的时候始终会创建一个全局执行上下文，其中关键字 &lt;code>this&lt;/code> 等于 &lt;code>window&lt;/code> 对象。 因此在上面的代码中我们总共有3个执行上下文，一个全局执行上下文，两个函数执行上下文，分别是 &lt;code>tom()&lt;/code>和&lt;code>jerry()&lt;/code> 。
&lt;img src="https://static.aalmix.com/20210309172743.jpg" alt="functions.png">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>代码执行的时候先会在全局执行上下文中创建一个 &lt;code>name&lt;/code> 变量，然后给这个变量复制为 &lt;code>cargoon&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;cartoon&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>当调用&lt;code>tom()&lt;/code>函数，Javascript 引擎会给&lt;code>tom()&lt;/code>创建一个函数执行上下文和一个外部环境的引用（全局执行上下文）&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">tom();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>当 tom() 函数调用 &lt;code>jerry()&lt;/code> 函数时，JavaScript 引擎会找到 jerry 函数申明的位置，然后创建 &lt;code>jerry()&lt;/code>函数的执行上下文和外部环境引用&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> tom() {
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;tom&amp;#39;&lt;/span>;
jerry();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等等，&lt;code>jerry()&lt;/code> 函数的外部环境引用是谁？是 &lt;code>tom()&lt;/code>函数的执行上下文还是全局执行上下文？这取决于另一个问题的答案&lt;/p>
&lt;blockquote>
&lt;p>谁调用了 jerry() 函数，它在哪里声明创建的？&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>jerry()&lt;/code> 函数是在全局执行上下文中创建的，尽管它是在 tom() 函数中调用。按照要点2的理解，jerry() 函数有一个指向全局执行执行上下文的指针。&lt;/p>
&lt;p>到目前为止，Are you OK ? 我们还发现，jerry() 函数中并没有申明 &lt;code>name&lt;/code> 变量，但是在执行阶段它却尝试在控制台打印这个 &lt;code>name&lt;/code> 变量的值&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> jerry() {
console.log(name);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个时候，JavaScript 引擎会去 jerry() 函数的外部引用（全局执行上下文）中去查找 &lt;code>name&lt;/code> 变量，然后它在全局执行上下文中找到了 cartoon 这个值。&lt;/p>
&lt;p>现在我们知道答案为什么是 &lt;code>cartoon&lt;/code> 了吧。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210309172749.gif" alt="flow1">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>​&lt;/p>
&lt;p>在当前执行上下文和外部引用中查找变量的整个过程就形成了的链条叫做&lt;code>作用域链&lt;/code>。我们还可以得出结论，变量&lt;code>name&lt;/code>在函数 jerry() 的作用域中，因为它是在 jerry() 函数作用域中被找到的。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210309172753.jpg" alt="scope_chain">&lt;/p>
&lt;h2 id="作用域的变化">作用域的变化&lt;/h2>
&lt;p>测试时间又到了！下面的代码将会打印出什么？&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> tom() {
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;tom&amp;#39;&lt;/span>;
&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> jerry() {
console.log(name);
}
jerry();
}
&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;cartoon&amp;#39;&lt;/span>;
tom();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这次我们稍微做了一些小改动，现在 jerry() 函数是在 tom() 函数里面创建的。jerry() 函数的外部引用将会指向 tom() 函数的执行上下文。因此变量 &lt;code>name&lt;/code> 将在tom() 函数的作用域链中被找到。所以，上面的答案就是 &lt;code>tom&lt;/code> !&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20210309172759.gif" alt="flow2">&lt;/p>
&lt;h2 id="块级作用域-block-scope">块级作用域 Block Scope&lt;/h2>
&lt;p>既然我们理解了作用域的基本原理，那么就让我们来理解一下什么是块级作用域。代码块通过大括号定义&lt;code>{...}&lt;/code>。&lt;/p>
&lt;p>如果在代码块中使用 &lt;code>let&lt;/code> 关键字申明变量，那么变量只在这个代码块中可以被访问。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">{
&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;tom&amp;#34;&lt;/span>; &lt;span style="color:#6272a4">// only visible in this block
&lt;/span>&lt;span style="color:#6272a4">&lt;/span>
console.log(name); &lt;span style="color:#6272a4">// tom
&lt;/span>&lt;span style="color:#6272a4">&lt;/span>}
console.log(name); &lt;span style="color:#6272a4">// Error: name is not defined
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我们使用 &lt;code>var&lt;/code> 而不是 &lt;code>let&lt;/code> 创建变量，就不存这个块级作用域了。&lt;/p>
&lt;p>另一个例子：&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">{
&lt;span style="color:#6272a4">// declare name
&lt;/span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> name&lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;tom&amp;#34;&lt;/span>;
console.log(name);
}
{
&lt;span style="color:#6272a4">// declare name in another block
&lt;/span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> name &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;jerry&amp;#34;&lt;/span>;
console.log(name);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上面的代码会在控制台中分别打印 tom 和 jerry 。&lt;/p>
&lt;p>即使对于 &lt;code>if&lt;/code>, for , while 等等，使用了 &lt;code>let&lt;/code> 在块级作用域中声明的代码也只能在块中访问，下面是 for 循环的例子&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#ff79c6">for&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> counter &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>; counter &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">10&lt;/span>; counter&lt;span style="color:#ff79c6">++&lt;/span>) {
&lt;span style="color:#6272a4">// the variable counter is with let
&lt;/span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// hence visible only inside the block {...}
&lt;/span>&lt;span style="color:#6272a4">&lt;/span> console.log(counter);
}
console.log(counter); &lt;span style="color:#6272a4">// Error, counter is not defined
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>理解作用域的基本概念，比如执行上下文、外部引用等等，将有助于我们调试代码，作为 JavaScript 的开发者，我们对于了解JavaScript 内部代码的工作方式更有信息。&lt;/p>
&lt;p>引用&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://leanpub.com/ydkjsy-scope-closures/read_sample">Scope and Closure&lt;/a> from You don&amp;rsquo;t know JS yet series.&lt;/li>
&lt;li>&lt;a href="https://javascript.info/closure">Variable Scope&lt;/a> from &lt;a href="http://javascript.info/">javascript.info&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope">https://developer.mozilla.org/en-US/docs/Glossary/Scope&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>文章来源： &lt;a href="https://blog.greenroots.info/javascript-scope-fundamentals-with-tom-and-jerry-ckcq723h4007vkxs18dxa97ae">https://blog.greenroots.info/javascript-scope-fundamentals-with-tom-and-jerry-ckcq723h4007vkxs18dxa97ae&lt;/a>&lt;/p></description></item><item><title>frp搭配nginx将https请求映射到内网</title><link>https://wubh2012.github.io/frp%E6%90%AD%E9%85%8Dnginx%E5%B0%86https%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%88%B0%E5%86%85%E7%BD%91.html</link><pubDate>Sat, 19 Dec 2020 16:01:12 +0000</pubDate><guid>https://wubh2012.github.io/frp%E6%90%AD%E9%85%8Dnginx%E5%B0%86https%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%88%B0%E5%86%85%E7%BD%91.html</guid><description>&lt;p>最近做微信小程序开发，发现正式发布的时候后台 webapi 服务必须是 https 协议的，当然开发的时候可以勾选不校验域名
&lt;img src="https://static.aalmix.com/20201219163456.png" alt="image-20201219160934257">&lt;/p>
&lt;p>我们之前使用 frp 将内网服务映射出去后只能提供 http 协议的形式访问，无法使用 https 协议，这个怎么办呢？&lt;/p>
&lt;p>经过一番资料查找，发现需要搭配 nginx 一起使用就可以解决。
&lt;img src="https://static.aalmix.com/image-20230218223202953.png" alt="image-20230218223202953">&lt;/p>
&lt;p>首先我们需要给我们的域名申请一个免费的 SSL 证书，腾讯云和阿里云都有免费的。&lt;/p>
&lt;p>第二步，配置内网 fprc.ini ，这里我们将本地的 8099 端口映射到远程的 8099 端口&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
server_addr = 云服务器IP地址
server_port = 7000
token = 123456
[wx_webapi]
type = tcp
local_ip = 127.0.0.1
local_port = 8099
remote_port = 8099
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>服务器端的配置 frps.ini&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
bind_port = 7000
token = 123456
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样我们就可以通过访问 http://云服务器 IP 地址:8099 访问内网的 webapi 了&lt;/p>
&lt;p>第三步，在云服务器上使用下面的命令安装 nginx&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">sudo apt-get install nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第四步，将申请的 SSL 证书复制到云服务器上，并开始配置 nginx ，&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">sudo vi /etc/nginx/nginx.conf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">server{
ssl on;
listen 18099;
server_name www.abc.com; # 域名
ssl_certificate server.crt; # 配置 SSL 证书
ssl_certificate_key server.key; # 配置 SSL 证书
ssl_session_timeout 5m;
location / {
proxy_pass http://127.0.0.1:8099; #外部请求18099端口时，nginx会将请求代理转发到本地的8099端口
proxy_set_header Host $http_host;
proxy_set_header Connection &amp;#34;Upgrade&amp;#34;;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>第四步，启动 nginx&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">start nginx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样外部请求 18099 端口时，nginx 会将请求代理转发到本地的 8099 端口，也就是 frp 内网穿透的端口，&lt;/p>
&lt;p>那么当我们请求 &lt;a href="https://www.abc.com:18099">https://www.abc.com:18099&lt;/a> 时，实际上请求的内网服务器的 8099 端口&lt;/p>
&lt;p>这样我们就解决了 https 访问的问题了！&lt;/p></description></item><item><title>如何在Markdown文档显示diff效果</title><link>https://wubh2012.github.io/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E6%96%87%E6%A1%A3%E6%98%BE%E7%A4%BAdiff%E6%95%88%E6%9E%9C.html</link><pubDate>Fri, 13 Nov 2020 17:14:11 +0000</pubDate><guid>https://wubh2012.github.io/%E5%A6%82%E4%BD%95%E5%9C%A8markdown%E6%96%87%E6%A1%A3%E6%98%BE%E7%A4%BAdiff%E6%95%88%E6%9E%9C.html</guid><description>&lt;p>&lt;img src="https://www.wangbase.com/blogimg/asset/202011/bg2020110301.jpg" alt="img">&lt;/p>
&lt;p>我最喜欢的一个博客技巧就是在 Github 风格的 markdown 中使用 diff 格式，使用这个这个技巧可以显示代码片段中修改的地方。&lt;/p>
&lt;p>如果我想给其他人显示一个函数修改的状态历史，类似于下面的代码片段&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-diff" data-lang="diff">function addTwoNumbers (num1, num2) {
&lt;span style="color:#8b080b">- return 1 + 2
&lt;/span>&lt;span style="color:#8b080b">&lt;/span>&lt;span style="font-weight:bold">+ return num1 + num2
&lt;/span>&lt;span style="font-weight:bold">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如何实现呢?&lt;/p>
&lt;p>首先不要指定变成语言， 而是使用 &lt;code>diff&lt;/code>，然后在需要显示成删除样式的代码的开头添加&lt;code>-&lt;/code>，添加的代码的前面添加一个&lt;code>+&lt;/code>，代码如下所示&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-text" data-lang="text">```diff
function addTwoNumbers (num1, num2) {
- return 1 + 2
+ return num1 + num2
}
```
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>OK！！&lt;/p>
&lt;p>原文地址： &lt;a href="https://welearncode.com/create-diff-markdown/">https://welearncode.com/create-diff-markdown/&lt;/a>&lt;/p></description></item><item><title>在windows上设置frp开机自动启动</title><link>https://wubh2012.github.io/%E5%9C%A8windows%E4%B8%8A%E8%AE%BE%E7%BD%AEfrp%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8.html</link><pubDate>Thu, 05 Nov 2020 20:55:59 +0000</pubDate><guid>https://wubh2012.github.io/%E5%9C%A8windows%E4%B8%8A%E8%AE%BE%E7%BD%AEfrp%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8.html</guid><description>&lt;h3 id="写在前面">写在前面&lt;/h3>
&lt;p>在之前的文章中介绍了在 Windows 上运行frp的客户端需要在命令行中输入一下命令&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">frpc.exe -c frpc.ini
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是如何不小心关掉了命令行窗口就需要手动重新打开，当然也可以把上面的命令复制后另存为run.bat文件，下次双击运行就可以使用，但是我们还是想实现开机自动运行，那么该如何做呢？&lt;/p>
&lt;p>这个时候我们需要借助第三方的工具 &lt;a href="https://nssm.cc/">nssm&lt;/a>， nssm 官网的介绍如下&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>nssm&lt;/em> is a service helper which doesn&amp;rsquo;t suck. &lt;em>srvany&lt;/em> and other service helper programs suck because they don&amp;rsquo;t handle failure of the application running as a service. If you use such a program you may see a service listed as started when in fact the application has died. &lt;em>nssm&lt;/em> monitors the running service and will restart it if it dies. With &lt;em>nssm&lt;/em> you know that if a service says it&amp;rsquo;s running, it really is. Alternatively, if your application is well-behaved you can configure &lt;em>nssm&lt;/em> to absolve all responsibility for restarting it and let Windows take care of recovery actions.&lt;/p>
&lt;/blockquote>
&lt;p>大概的意思就是 nssm 可以将程序注册成 windows 服务，并且会监听正在运行的服务，当服务死了之后会自动重启。&lt;/p>
&lt;h3 id="下载-nssm">下载 nssm&lt;/h3>
&lt;p>先去 &lt;a href="https://nssm.cc/download">https://nssm.cc/download&lt;/a> 这个地址下载 nssm, 下载后的文件非常小只有 300+ KB，算的上是短小精悍。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173532.png" alt="image-20201105213254604">&lt;/p>
&lt;h3 id="如何使用-nssm">如何使用 nssm&lt;/h3>
&lt;ol>
&lt;li>进入命令行窗口，输入&lt;code>nssm install &lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173550.png" alt="image-20201105213622063">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173557.png" alt="image-20201105213739577">&lt;/p>
&lt;ol start="2">
&lt;li>执行之后会显示下面这个页面，选择 frpc 程序的路径，以及启动的参数&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173601.png" alt="image-20201105213843898">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173603.png" alt="image-20201105214258612">&lt;/p>
&lt;ol start="3">
&lt;li>填写服务的显示名称以及服务说明，还有启动方式，默认是自动自动&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173606.png" alt="image-20201105214507281">&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;p>配置程序输入和输出日志存放位置（可选）&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173609.png" alt="image-20201105215008339">&lt;/p>
&lt;ol start="5">
&lt;li>点击 &lt;code>Install service&lt;/code> 按钮安装服务&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h3 id="管理服务">管理服务&lt;/h3>
&lt;p>按下&lt;code>Win+R&lt;/code>键，在运行中输入&lt;code>service.msc&lt;/code> 命令打开服务管理器，我们就可以看到刚刚安装的frp服务了，然后我们就向其他windows服务一样控制它启动，停止，重启了。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173612.png" alt="image-20201105215255665">&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201106173615.png" alt="image-20201105215411888">&lt;/p>
&lt;p>当前我们可以通过 nssm 的命令行的形式控制它&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># 启动
nssm start &amp;lt;servicename&amp;gt;
# 停止
nssm stop &amp;lt;servicename&amp;gt;
# 重启
nssm restart &amp;lt;servicename&amp;gt;
# 修改服务配置
nssm edit &amp;lt;servicename&amp;gt;
# 删除服务
nssm remove &amp;lt;servicename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参考： &lt;a href="http://www.cnblogs.com/TianFang/p/7912648.html">www.cnblogs.com/TianFang/p/7912648.html&lt;/a>&lt;/p></description></item><item><title>使用frp内网穿透教程</title><link>https://wubh2012.github.io/%E4%BD%BF%E7%94%A8frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%95%99%E7%A8%8B.html</link><pubDate>Mon, 02 Nov 2020 17:27:46 +0000</pubDate><guid>https://wubh2012.github.io/%E4%BD%BF%E7%94%A8frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%95%99%E7%A8%8B.html</guid><description>&lt;h2 id="写在前面">写在前面&lt;/h2>
&lt;p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>一台具有公网 IP 的服务器，可以去购买阿里云服务器，腾讯云服务器或者 Vultr&lt;/p>
&lt;/li>
&lt;li>
&lt;p>frp 工具软件可以去这个 &lt;a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases&lt;/a> 地址下载 frp 的客户端和服务端软件，由于我自己服务器安装的是 ubuntu 64 位，客户端用的是 windows ，所以就下载了图片中红色标注的版本，大家可以根据自己的系统的版本去下载。linux_amd64.tar.gz 放在服务器上，windows_386 作为客户端使用&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201102173858.png" alt="image-20201102173221758">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>将文件下载解压后的文件目录大概是这个样子，frpc, frpc.ini 主要是客户端使用，frps, frps.ini 主要是服务器端使用。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201102173902.png" alt="image-20201102173208329">&lt;/p>
&lt;h2 id="frp-配置">frp 配置&lt;/h2>
&lt;h3 id="服务端-frpsini-文件配置">服务端 frps.ini 文件配置&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
# 服务端与客户端通信使用的端口
bind_port = 7000
# 客户端和服务端通信的认证信息
token = 123456
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="客户端-frpcini-文件配置">客户端 frpc.ini 文件配置&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
# 服务器IP
server_addr = x.x.x.x
# 服务器端口，与 frps.ini 中的 bind_port 一致
server_port = 7000
# 客户端和服务端通信的认证信息
token = 123456
# 启用tls，frpc会使用 tls 加密连接服务器
tls_enable = true
# [] 方括号里面的名称需要保证唯一
[ssh]
type = tcp
# 客户端的 IP 地址
local_ip = 127.0.0.1
# 客户端需要映射出去的端口
local_port = 22
# 远程
remote_port = 6000
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="实战">实战&lt;/h2>
&lt;h3 id="1-使用-frp-实现内网机器的远程连接">1. 使用 frp 实现内网机器的远程连接&lt;/h3>
&lt;p>将 frpc.ini 改成如下配置，假设 frps 所在服务器的公网 IP 为 x.x.x.x，我们需要将本地的 3389 端口（远程连接使用的端口）映射到远程的 7402 端口&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
server_addr = x.x.x.x
server_port = 7000
token = 123456
[ssh]
type = tcp
local_ip = 127.0.0.1
local_port = 22
remote_port = 6000
[mstsc] # 名字随便取，但不能重复
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 7402
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在服务器端启动 frps&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">./frps -c ./frps.ini
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在客户端启动 frpc, windows 客户端需要使用命令行运行一下命令，不能直接双击运行&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">./frpc -c ./frpc.ini
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们就可以使用远程桌面连接我们内网的电脑了，注意端口使用的 remote_port，远程桌面的体验就取决于服务器的带宽了&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201102173908.png" alt="image-20201102173541252">&lt;/p>
&lt;p>我们可以将多台电脑的 3389 端口映射出去，但需要每台电脑使用的 remote_port 不能相同，[mstsc] 也不能相同，如果同时已经开了 1 台电脑的远程连接，那么远程第二台的时候需要选择其它用户进行登录。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201102173910.png" alt="image-20201102173622633">&lt;/p>
&lt;h3 id="2实现内网-web-端口转发可以用于微信接口本地开发">2.实现内网 web 端口转发，可以用于微信接口本地开发&lt;/h3>
&lt;p>frps.ini&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
bind_port = 7000
token = 123456
vhost_http_port = 8080
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>frpc.ini&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback">[common]
server_addr = x.x.x.x
server_port = 7000
token = 123456
[ssh]
type = tcp
local_ip = 127.0.0.1
local_port = 22
remote_port = 6000
[mstsc]
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 7402
[web]
type = http
local_ip = 127.0.0.1
local_port = 8078
custom_domains = www.youdomain.com
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的配置文件多了一个 token 的配置，token 用于验证连接，只有服务器端和客户端的 token 相同才能正常访问,避免被别人恶意攻击。重新启动 frps 和 frpc，然后我们就可以通过 &lt;a href="http://www.youdomain.com/">www.youdomain.com&lt;/a>:8080 访问 内网地址的 8078 端口了，8080 端口是 frps 中配置的 vhost_http_port 端口。&lt;/p>
&lt;p>&lt;img src="https://static.aalmix.com/20201102173915.png" alt="image-20201102173744935">&lt;/p>
&lt;p>**没有域名的配置 **&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2">&lt;code class="language-fallback" data-lang="fallback"># frps.ini
[common]
bind_addr = 0.0.0.0
bind_port = 7000
privilege_token = 12345678
# frpc.ini客户端配置
[common]
server_addr = 服务端IP
server_port = 7000
privilege_token = 12345678
[httpname]
type = tcp
local_port = 80
local_ip = 127.0.0.1
remote_port = 8080
通过 服务端IP:8080既可访问到对应穿透的服务
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>官网说明文档 &lt;a href="https://github.com/fatedier/frp/blob/master/README_zh.md">https://github.com/fatedier/frp/blob/master/README_zh.md&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将 frp 注册为 windows 服务 &lt;a href="https://www.cnblogs.com/mobaids/p/11567899.html">https://www.cnblogs.com/mobaids/p/11567899.html&lt;/a> 【测试通过】&lt;/p>
&lt;/li>
&lt;li>
&lt;p>frp 使用 nginx 配置多个 http 代理 &lt;a href="https://github.com/fatedier/frp/issues/287">https://github.com/fatedier/frp/issues/287&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有域名的访问 web 服务的配置https://www.cnblogs.com/sanduzxcvbnm/p/8509150.html 【测试通过】&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用二级域名的方式访问多个 web 服务 &lt;a href="https://blog.csdn.net/u012577474/article/details/99690716">https://blog.csdn.net/u012577474/article/details/99690716&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>猎豹行动读书笔记</title><link>https://wubh2012.github.io/%E7%8C%8E%E8%B1%B9%E8%A1%8C%E5%8A%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</link><pubDate>Thu, 01 Oct 2020 10:37:09 +0800</pubDate><guid>https://wubh2012.github.io/%E7%8C%8E%E8%B1%B9%E8%A1%8C%E5%8A%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</guid><description>&lt;h2 id="传统模式的问题">传统模式的问题&lt;/h2>
&lt;p>瀑布模型对业务部门的痛点&lt;/p>
&lt;ol>
&lt;li>逾期交付&lt;/li>
&lt;li>超支&lt;/li>
&lt;li>看到成品时项目已经接近尾声&lt;/li>
&lt;li>缺乏透明度，不知道具体进度&lt;/li>
&lt;li>很难变更需求&lt;/li>
&lt;li>最终开发的产品不是他们想要的&lt;/li>
&lt;li>延误战机，丢失机场机会&lt;/li>
&lt;/ol>
&lt;p>对IT部门的痛点：&lt;/p>
&lt;ol>
&lt;li>过度承诺&lt;/li>
&lt;li>难以一次性消化所有需求&lt;/li>
&lt;li>害怕需求变更&lt;/li>
&lt;li>不断重做&lt;/li>
&lt;li>后期压力大&lt;/li>
&lt;li>加班&lt;/li>
&lt;/ol>
&lt;p>分析造成这些痛点的原因：一个项目开始时，业务部门只会给IT部门需求概要和期望的交付日期，IT部门需要做评估和计划。而在项目开始的时候，只有预算和目标交付时间时确定的，还有其他因素都是不确定的，例如范围与具体需求，可能的需求变更，人员中途休假和离职，对现有系统的影响，服务器环境的搭建（需要什么配置，何时能到位）等。&lt;/p>
&lt;p>瀑布模型的开发过程一般有需求分析，设计，编程，测试和发布几个阶段，每个阶段一环扣一环，设计，编程，测试都依赖于完整且稳定的需求，因此需求分析非常重要，但往往花大了大量的时间挖掘需求，却压缩了开发时间，形成矛盾。用户在看到成品前，可能都无法确定自己真正想要的是什么，需求变化是不可避免的，牵一发而动全身，导致IT人员普遍不喜欢需求变更，所以简单的说瀑布模型适合确定性非常搞的项目，但这样的项目凤毛麟角。&lt;/p>
&lt;h2 id="什么是敏捷开发">什么是敏捷开发&lt;/h2>
&lt;p>敏捷所有的改变都是为了一件事，快速反馈！&lt;/p>
&lt;p>敏捷开发有很多方法论，其中比较流行的有Scrum，极限编程，看板方法。
Scrum中的概念：
&lt;strong>Product Owner（PO）&lt;/strong>：用户/客户/业务的代言人，就是可以做出业务决策的人，在Scrum中，PO的角色非常重要，一个成功的敏捷项目背后一定有一个好的PO。
&lt;strong>Scrum Master&lt;/strong>：熟悉Scrum流程的人，指导和确保团队已Scrum的方式进行交付
&lt;strong>Sprint&lt;/strong>： 迭代，一个项目的交付由多个迭代构成。
&lt;strong>User Story&lt;/strong>：用户故事，具有业务价值的交付单位，一个项目是由很多用户故事构成的。
&lt;strong>Product Backlog&lt;/strong>:可以理解位项目的待办，由用户故事构成
&lt;strong>Sprint Backlog&lt;/strong>: Sprint待办，确定一个迭代中由哪些用户故事，确定本次迭代的开发范围&lt;/p>
&lt;p>每个项目的交付由多个迭代构成，迭代的周期是固定的，通常是2-4个星期，不建议超过4个星期。&lt;/p>
&lt;h2 id="如何启动敏捷开发scrum开发流程">如何启动敏捷开发，Scrum开发流程：&lt;/h2>
&lt;ul>
&lt;li>在每个Sprint开始的时候，PO和IT团队一起开Sprint计划会议，PO 对 Product Backlog 中的用户故事进行排序，选出最重要的用户故事。IT团队会对这些用户故事进行估算。&lt;/li>
&lt;li>接下来IT团队围绕Sprint Backlog中的用户故事进行开发。IT团队每天组织一次站会，所有成员聚在一起，每个成员说一下“昨天做了什么，今天会做什么，昨天遇到了什么问题”，这是为了让整个团队了解进度，也是为了尽早地暴露问题并及时解决。一个问题越早解决成本越低。由于站会每天都要发生，因此这个会议建议控制在15~20分钟。团队规模也有要求，建议团队人数控制在7个人以内。如果项目比较大型，应该考虑把大型团队拆分成若干个小团队。小团队的沟通效率也远远比大型团队高。&lt;/li>
&lt;li>在Sprint结束的时候，PO和IT团队又聚在一起开评审会议，IT团队向PO展示这个Sprint的交付，PO有任何反馈，甚至编程都可以定义成新的用户故事放到Product Backlog中重新排队，这也是敏捷应对需求变化的方法。这样缩短了反馈周期，可以帮助双方及时调整项目的方向，确保最终交付的正确性。&lt;/li>
&lt;li>IT团队也可以在这个时候总结下这个迭代中哪些地方做的好，哪些地方可以做的更好，形成持续改善的机制。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>敏捷宣言&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>个体的交互胜于过程与工具&lt;/li>
&lt;li>可工作的软件胜于面面俱到的文档&lt;/li>
&lt;li>与客户的协作甚于基于合同的谈判&lt;/li>
&lt;li>短迭代开发，让PO更快，更早的看到成品，给与反馈&lt;/li>
&lt;li>每日站会，每天都能看到进度和阻碍&lt;/li>
&lt;li>回顾会议，每个迭代都要反思改进，形成持续改善的机制&lt;/li>
&lt;/ul>
&lt;h2 id="实施敏捷开发的好处">实施敏捷开发的好处&lt;/h2>
&lt;p>对业务部门：&lt;/p>
&lt;ol>
&lt;li>不再需要一次性解释所有的需求&lt;/li>
&lt;li>可以随时提出需求变更&lt;/li>
&lt;li>进度透明&lt;/li>
&lt;li>确保最重要的需求能在目标交付日期获得&lt;/li>
&lt;li>确保得到正确的产品&lt;/li>
&lt;/ol>
&lt;p>对IT部门：&lt;/p>
&lt;ol>
&lt;li>不再需要承诺一个未必能实现的计划&lt;/li>
&lt;li>更早的开工和交付&lt;/li>
&lt;li>为当前迭代进行更精确的计划&lt;/li>
&lt;li>适应需求变化&lt;/li>
&lt;li>适应不确定性&lt;/li>
&lt;li>开发正确的产品&lt;/li>
&lt;li>与业务人员的争执更少&lt;/li>
&lt;/ol>
&lt;h2 id="敏捷与devops有什么关联">敏捷与Devops有什么关联&lt;/h2>
&lt;p>敏捷打通了业务、开发、测试之间的墙，通过更紧密的沟通和交互实现更频繁的交付，然而开发团队和运维团队之间还有一堵墙，开发团队希望持续交付，运维团队希望稳定，DevOps就是要打破这最后一堵墙，实现开发与运维一体化和端对端的持续交付。&lt;/p>
&lt;h2 id="疑问">疑问&lt;/h2>
&lt;p>Q: 假如项目在开始的时候，客户一定要我们承诺什么时候能交付，这个怎么解决？
A: 敏捷自己有一套估算和计划方法&lt;/p>
&lt;h2 id="工具">工具&lt;/h2>
&lt;p>JIRA: 项目与事务跟踪工具，被广泛应用于缺陷跟踪，客户服务，需求收集，敏捷管理&lt;/p></description></item></channel></rss>